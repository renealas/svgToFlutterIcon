import 'package:flutter/foundation.dart';
import 'package:path_parsing/path_parsing.dart';

/// A [PathProxy] that dumps Flutter `Path` commands to the console.
class PathPrinter extends PathProxy {
  String code = '';

  @override
  void close() {
    // print('Path.close();');
    code += 'path.close();';
  }

  @override
  void cubicTo(
      double x1, double y1, double x2, double y2, double x3, double y3) {
    // print('Path.cubicTo($x1, $y1, $x2, $y2, $x3, $y3);');
    code +=
        'path.cubicTo($x1 * _xScaling, $y1 * _yScaling, $x2 * _xScaling, $y2 * _yScaling, $x3 * _xScaling, $y3 * _yScaling,);';
  }

  @override
  void lineTo(double x, double y) {
    // print('Path.lineTo($x, $y);');
    code += 'path.lineTo($x * _xScaling, $y * _yScaling);';
  }

  @override
  void moveTo(double x, double y) {
    // print('Path.moveTo($x, $y);');
    code += 'path.moveTo($x * _xScaling, $y * _yScaling);';
  }
}

void main() {
  PathPrinter pp = PathPrinter();
  // Just put an svg path to it - is going to return all the code you need dumbass
  writeSvgPathDataToPath('m 11.0509,75.172812 c 2.8655,2.633 5.8113,4.768 8.8373,6.404 3.0261,1.636 6.252,2.226 9.6778,1.771 2.5544,-0.274 4.5048,-1.195 5.8513,-2.765 1.4347,-1.579 2.0482,-3.337 1.8408,-5.275 -0.1948,-2.652 -1.6055,-4.595 -4.232,-5.828 -2.6361,-1.322 -5.4687,-2.399 -8.498,-3.233 -2.57,-0.705 -5.1195,-1.635 -7.6486,-2.79 -2.441,-1.164 -4.5281,-2.767 -6.2612,-4.809 -1.6544,-2.139 -2.6215,-4.931 -2.9011,-8.375 -0.2387,-3.895 0.5181,-7.228 2.2706,-9.999 1.7524,-2.771 4.1481,-4.943 7.1871,-6.516 3.1176,-1.67 6.4821,-2.698 10.0934,-3.085 4.9326,-0.528 9.3571,0.023 13.2734,1.653 4.0044,1.62 7.4047,3.84 10.201,6.659 l -7.0363,9.172 c -2.0949,-2.092 -4.5044,-3.794 -7.2285,-5.106 -2.636,-1.321 -5.3633,-1.831 -8.1819,-1.53 -2.3783,0.255 -4.2595,0.991 -5.6437,2.208 -1.2962,1.208 -1.85,2.693 -1.6614,4.454 0.1665,2.388 1.4215,4.125 3.7649,5.21 2.4222,0.988 5.1966,1.938 8.3234,2.851 3.1268,0.913 6.0082,2.03 8.6442,3.351 2.6266,1.233 4.7672,2.92 6.4216,5.059 1.7331,2.042 2.7442,4.829 3.0333,8.362 0.4273,5.656 -1.231,10.555 -4.9749,14.698 -3.6557,4.133 -8.7426,6.548 -15.2607,7.246 -6.1657,0.66 -11.6409,-0.135 -16.4253,-2.384 -4.7939,-2.338 -8.6519,-5.088 -11.574,-8.25 z m 45.3114,-46.278 9.6449,-1.032 1.3044,-21.5218 14.1367,-1.5133 -1.436,21.5361 10.041,-1.075 -0.902,12.792 -9.9094,1.061 -3.2936,49.13 -13.7408,1.471 3.0294,-49.102 -9.7771,1.046 z m 36.114,26.871 c 0.24,-6.084 1.691,-11.674 4.353,-16.77 2.74,-5.193 6.386,-9.414 10.939,-12.664 4.542,-3.337 9.588,-5.302 15.137,-5.896 4.845,-0.519 8.941,0.29 12.288,2.426 3.346,2.137 5.932,5.067 7.756,8.792 l 0.709,-12.103 14.005,-1.4996 -4.064,61.9076 -13.609,1.457 0.629,-10.357 c -2.265,3.806 -5.179,6.969 -8.74,9.488 -3.482,2.422 -7.47,3.873 -11.962,4.354 -5.549,0.594 -10.417,-0.355 -14.604,-2.846 -4.187,-2.492 -7.415,-6.022 -9.686,-10.59 -2.28,-4.656 -3.331,-9.889 -3.151,-15.699 z m 14.534,-1.556 c -0.161,3.492 0.399,6.639 1.679,9.442 1.28,2.803 3.12,5.012 5.52,6.626 2.479,1.516 5.436,2.091 8.871,1.723 3.171,-0.34 6.076,-1.497 8.715,-3.472 2.719,-2.073 4.935,-4.671 6.65,-7.795 1.803,-3.133 2.775,-6.533 2.917,-10.201 0.073,-3.482 -0.526,-6.581 -1.797,-9.296 -1.192,-2.812 -2.939,-4.986 -5.242,-6.522 -2.224,-1.633 -4.882,-2.328 -7.974,-2.086 -3.445,0.28 -6.614,1.465 -9.508,3.557 -2.816,1.994 -5.121,4.602 -6.914,7.823 -1.715,3.123 -2.687,6.524 -2.917,10.201 z m 150.445,-24.39 -2.344,39.273 -14.269,1.527 2.646,-37.701 c 0.009,-2.407 -0.226,-4.609 -0.707,-6.606 -0.403,-2.095 -1.243,-3.698 -2.52,-4.809 -1.189,-1.12 -2.972,-1.553 -5.351,-1.298 -3.787,0.405 -6.87,1.983 -9.249,4.732 -2.29,2.74 -3.492,6.076 -3.606,10.008 l -2.485,37.952 -14.137,1.513 2.514,-37.688 c 0.009,-2.406 -0.182,-4.613 -0.575,-6.62 -0.403,-2.095 -1.243,-3.698 -2.52,-4.808 -1.189,-1.12 -2.972,-1.553 -5.351,-1.299 -3.699,0.396 -6.743,1.925 -9.131,4.586 -2.299,2.652 -3.506,5.944 -3.62,9.876 l -2.457,38.216 -14.005,1.499 4.064,-61.9081 13.741,-1.4709 -0.416,8.597 c 1.696,-3.299 3.907,-5.9416 6.635,-7.9263 2.806,-2.0823 6.103,-3.3261 9.89,-3.7315 4.493,-0.4809 8.041,0.2084 10.645,2.0678 2.693,1.8499 4.615,4.406 5.766,7.668 2.01,-3.6895 4.625,-6.7312 7.843,-9.1248 3.209,-2.4817 6.971,-3.9535 11.287,-4.4155 4.493,-0.4809 8.046,0.2524 10.66,2.1999 2.604,1.8593 4.452,4.557 5.543,8.0934 1.082,3.447 1.585,7.314 1.509,11.598 z m 26.989,65.533 -14.534,1.556 5.973,-91.5126 14.005,-1.4992 -0.539,9.9469 c 2.187,-3.7087 4.978,-6.7692 8.372,-9.1817 3.473,-2.51 7.456,-4.0054 11.948,-4.4863 5.637,-0.6034 10.505,0.3455 14.604,2.8468 4.187,2.4918 7.376,6.0704 9.568,10.7358 2.281,4.6563 3.336,9.9333 3.165,15.8313 -0.142,6.162 -1.583,11.84 -4.324,17.034 -2.74,5.193 -6.382,9.458 -10.925,12.796 -4.464,3.239 -9.515,5.161 -15.152,5.764 -4.844,0.519 -8.891,-0.251 -12.141,-2.308 -3.258,-2.146 -5.795,-5.037 -7.61,-8.674 z m 38.029,-64.207 c 0.16,-3.492 -0.399,-6.639 -1.679,-9.442 -1.192,-2.813 -3.023,-4.9332 -5.492,-6.3616 -2.479,-1.5165 -5.436,-2.0909 -8.871,-1.7232 -3.083,0.33 -5.988,1.4874 -8.716,3.4721 -2.727,1.9847 -4.993,4.5437 -6.795,7.6767 -1.724,3.035 -2.658,6.387 -2.799,10.055 -0.083,3.394 0.472,6.498 1.664,9.31 1.271,2.715 3.058,4.84 5.36,6.375 2.303,1.536 4.956,2.187 7.96,1.955 3.445,-0.28 6.575,-1.417 9.391,-3.411 2.903,-2.004 5.257,-4.572 7.059,-7.705 1.803,-3.133 2.776,-6.533 2.918,-10.201 z', pp);
  debugPrint(pp.code, wrapWidth: 1024);
}
